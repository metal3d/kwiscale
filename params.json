{"name":"Kwiscale","tagline":"Web Middleware for Golang","body":"kwiscale\r\n========\r\n\r\nWeb Middleware for Golang\r\n\r\nAt this time, Kwiscale is at the very begining of developpement. But you can test and give'em some pull-request to improve it.\r\n\r\n\r\nCheck documentation: http://godoc.org/github.com/metal3d/kwiscale\r\n\r\nHow to use\r\n==========\r\n\r\nInstall with \"go get\" command:\r\n\r\n    go get github.com/metal3d/kwiscale\r\n\r\nCreate a project:\r\n\r\n    mkdir ~/myproject && cd ~/myproject\r\n\r\nThe common way to create handlers is to append a package::\r\n\r\n    mkdir handlers\r\n    vim handlers/index.go\r\n\r\nLet's try an example:\r\n\r\n```go\r\npackage handlers\r\n\r\nimport \"github.com/metal3d/kwiscale\"\r\n\r\n// this is the Index Handler that\r\n// is composed by a RequestHandler\r\ntype IndexHandler struct {\r\n    // note this, we now use Tag to declare route Inside the Handler\r\n    kwiscale.RequestHandler `route:\"/home\"`\r\n}\r\n\r\n\r\n// Factory, this is *mandatory* !\r\nfunc (i *IndexHandler) New() kwiscale.IRequestHandler {\r\n    return new(IndexHandler)\r\n}\r\n\r\nfunc (this *IndexHandler) Get () {\r\n    this.Write(\"Hello !\")\r\n}\r\n```\r\n\r\nThen in you main.go::\r\n\r\n```go\r\n\r\npackage main\r\n\r\nimport (\r\n    \"github.com/metal3d/kwiscale\"\r\n    \"./handlers\"\r\n)\r\n\r\nfunc main() {\r\n    h := handlers.IndexHandler{}\r\n    kwiscale.AddHandler(&h)\r\n\r\n    kwiscale.Serve(\":8081\") //listen :8081\r\n}\r\n```\r\n\r\n\r\nThen run:\r\n\r\n    go run main.go\r\n\r\n\r\nVisit http://127.0.0.1:8081/home and you should see \"Hello\"\r\n\r\n\r\nWhat gives Kwiscale ?\r\n=====================\r\n\r\nKwiscale let you declare Handler methods with the HTTP method. This allows you to declare:\r\n\r\n* Get()\r\n* Post()\r\n* Head()\r\n* Delete()\r\n* Put()\r\n\r\nRoutes are regexp and captured elements are stocked in handler.UrlParams that is a []string.\r\n\r\nThe handler.Render method takes template path and context to implement. But it adds a nice way to \"overide\" templates.\r\n\r\nLet's take an example. \r\n\r\nAppend templates directory:\r\n    \r\n    mkdir templates\r\n\r\nThen create templates/main.html:\r\n\r\n```html\r\n<!DOCTYPE html>\r\n<html>\r\n    <head>\r\n        <title>{{ if .title }}{{.title}}{{ else }} Default title {{ end }}</title>\r\n    </head>\r\n    <body>\r\n        {{ template \"CONTENT\" . }}\r\n    </body>\r\n</html>\r\n```\r\nNow create templates/home directory:\r\n    \r\n    mkdir templates/home\r\n\r\nCreate templates/home/welcome.html:\r\n    \r\n    {{ override \"main.html\" }}\r\n\r\n    {{ define \"CONTENT\" }}\r\n        This the welcome message {{ .msg }}\r\n    {{ end }}\r\n\r\nIn handlers/index.go:\r\n\r\n```go\r\nfunc (this *IndexHandler) Get() {\r\n    this.Render(\"home/welcome.html\", map[string]string{\r\n        \"title\" : \"Welcome !!!\",\r\n        \"msg\"   : \"Hello you\",\r\n    })\r\n}\r\n```\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}